---
 - hosts: projet-linux-avance
   become: yes
   become_method: sudo

#TO DO
#- hardening conf ssh (public key only)
#- iptables
#- Cacti conf
#- Munni conf
#

   tasks:
    - name: Install preconfiguration needed packages
      apt:
        name: lxc,lxc-dev,dnsmasq-base,python,python-pip,gcc
        state: present
    - name: Install needed python package
      pip:
        name: lxc-python2
        state: present

    - name: Create a service for NAT and firewall rules iptables
      blockinfile:
        path: /etc/systemd/system/iptables.service
        state: present
        create: yes
        block: |
         [Unit]
         Description=Configuration d iptables
         After=network.target
         [Service]
         ExecStart=/bin/sh /usr/bin/auto_iptables.sh start
         ExecStop=/bin/sh /usr/bin/auto_iptables.sh stop
         Type=oneshot
         [Install]
         WantedBy=multi-user.target

    - name: Create the script for iptables
      blockinfile:
        path: /usr/bin/auto_iptables.sh
        state: present
        create: yes
        block: |
         #!/bin/sh
         case $1 in
         start|reload )
         iptables -F
         iptables -t nat -F
         iptables -t mangle -F
         iptables -X
         #NAT Web to the container
         iptables -t nat -A PREROUTING -d 10.0.20.3:80 -j DNAT --to-destination 10.0.200.2:80
         #Allow SSH
         iptables -t filter -A INPUT -i ens192 -p TCP --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
         iptables -t filter -A OUTPUT -p TCP --sport 22 -m conntrack --ctstate ESTABLISHED -j ACCEPT
         #Allow HTTP
         iptables -t filter -A INPUT -i ens192 -p TCP --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
         iptables -t filter -A OUTPUT -p TCP --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT
         #Allow FTP (21 used to establish connection, 20 used for data transfer)
         #Drop all non-matching traffic on ens192
         iptables -A INPUT -i ens192 -j DROP
         iptables -A FORWARD -i ens192 -j DROP
         ;;
          stop )
         iptables -F
         iptables -t nat -F
         iptables -t mangle -F
         iptables -X
         ;;
          * ) echo "argument must be sart|reload|stop";;
         esac

    - name: Make auto_iptables.sh executable
      file: 
        path: /usr/bin/auto_iptables.sh
        mode: 755

    - name: Enable and start our newly created iptables service
      service: 
        name: iptables
        enabled: yes
        state: stopped

    - name: Delete LXC default config before defining our specific one
      file:
        path: /etc/lxc/default.conf
        state: absent

    - name: Config of LXC default config for new containers
      blockinfile:
        path: /etc/lxc/default.conf
        state: present
        create: yes
        block: |
         lxc.net.0.type = veth
         lxc.net.0.link = lxcbr0
         lxc.net.0.flags = up
         lxc.net.0.hwaddr = 00:16:3e:xx:xx:xx
         lxc.start.auto = 1

    - name: Static IP configuration for our container (defined in a specific file that will be specified in the LXC net conf)
      lineinfile:
        path: /etc/lxc/dnsmasq.conf
        line: "dhcp-host=miniwiki,10.0.200.2"
        state: present
        create: yes

    - name: Config of LXC default network conf (birdge IP, containers network, DHCP range and specific static binds) 
      blockinfile:
        path: /etc/default/lxc-net
        state: present
        create: yes
        block: |
         USE_LXC_BRIDGE="true"
         LXC_ADDR="10.0.200.1"
         LXC_DHCP_CONFILE=/etc/lxc/dnsmasq.conf
         LXC_NETWORK="10.0.200.0/24"
         LXC_DHCP_RANGE="10.0.200.200,10.0.200.205"

    - name: Restart lxc-net after the modifications that have been done
      service:
        name: lxc-net
        state: restarted

    - name: Create an alpine started container with logging enabled
      lxc_container:
        name: miniwiki
        template: alpine
        container_log: true
        state: started



    - name: Install bash on container for container_command because all commands run with container_command is executed with bash
      shell: lxc-attach miniwiki -- apk add bash

    - name: Now that bash is installed, install all the packages (because all commands run with container_command is executed with bash)
      lxc_container:
        name: miniwiki
        container_command: |
          apk add apache2 php$phpverx-apache2 php7-common php7-iconv php7-json php7-gd php7-curl php7-xml php7-mysqli php7-imap php7-cgi fcgi php7-pdo php7-pdo_mysql php7-soap php7-xmlrpc php7-posix
          apk add php7-mcrypt php7-gettext php7-ldap php7-ctype php7-dom php7-session wget mysql mysql-client php-zlib mysql mysql-client phpmyadmin vsftpd
          rc-update add apache2
          rc-service apache2 start
          mysql_install_db --user=mysql --datadir=/var/lib/mysql
          rc-service mariadb start
          sed -i "s|.*bind-address\s*=.*|bind-address=127.0.0.1|g" /etc/my.cnf.d/mariadb-server.cnf
          rc-update add mariadb
          rc-service mariadb restart
          printf "{{ securepass }}\n n\n n\n n\n y\n y\n y\n" | mysql_secure_installation
          chown -R apache:apache /etc/phpmyadmin/
          chown -R apache:apache /usr/share/webapps/
          ln -s /usr/share/webapps/phpmyadmin/ /var/www/localhost/htdocs/phpmyadmin
          rc-service apache2 restart
          sed -i "s|.*anonymous_enable\s*=.*|anonymous_enable=NO|g" /etc/vsftpd/vsftpd.conf
          sed -i "s|.*local_enable\s*=.*|local_enable=YES|g" /etc/vsftpd/vsftpd.conf
          sed -i "s|.*local_umask\s*=.*|local_umask=022|g" /etc/vsftpd/vsftpd.conf
          sed -i "s|.*write_enable\s*=.*|write_enable=YES|g" /etc/vsftpd/vsftpd.conf
          sed -i "s|.*ftpd_banner\s*=.*|ftpd_banner=Salut les petit potes|g" /etc/vsftpd/vsftpd.conf
          sed -i "s|.*connect_from_port_20\s*=.*|connect_from_port_20=NO|g" /etc/vsftpd/vsftpd.conf
          echo "seccomp_sandbox=NO" >> /etc/vsftpd/vsftpd.conf && "pasv_enable=NO" >> /etc/vsftpd/vsftpd.conf
          rc-service vsftpd start
          rc-update add vsftpd
          cd /usr/share/webapps/
          wget http://wordpress.org/latest.tar.gz
          tar -xzvf latest.tar.gz
          rm latest.tar.gz
          chown -R apache:apache /usr/share/webapps/
          ln -s /usr/share/webapps/wordpress/ /var/www/localhost/htdocs/wordpress
          mysql -uroot -e "CREATE DATABASE wordpress;"
          mysql -u root -e "GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpress'@'localhost' IDENTIFIED BY '"{{ wordpressdbpass }}"';"
          mysql -u root -e "FLUSH PRIVILEGES;"

    - name: Create MOTD banner file
      blockinfile:
        path: /etc/MOTD.laboppl
        state: present
        create: yes
        block: |
         ################################################################
         #          PROJET LINUX AVANCE - Authorized user only          #
         #               all your actions are recorded                  #
         ################################################################ 


    - name: Configure MOTD banner
      replace:
       path: /etc/ssh/sshd_config
       regexp: '^(.*)(Banner)(.*)$'
       replace: 'Banner /etc/MOTD.laboppl'
       backup: yes

    - name: Restart sshd
      systemd:
       name: sshd
       state: reloaded
...
